---
import Layout from '../layouts/Layout.astro';
import Footer from '../components/Footer.astro';
import Navbar from '../components/Navbar.astro';

// Get all blog posts
const allPosts = await Astro.glob('../content/blog/*.md');

// Sort posts by date (newest first)
const posts = allPosts
	.filter((post) => !post.frontmatter.draft)
	.sort(
		(a, b) =>
			new Date(b.frontmatter.date).getTime() -
			new Date(a.frontmatter.date).getTime(),
	);

// Get all unique tags
const allTags = [
	...new Set(posts.flatMap((post) => post.frontmatter.tags || [])),
].sort();

// All posts will be available to client-side JavaScript for filtering
const allPostsData = posts.map((post) => ({
	title: post.frontmatter.title || '',
	description: post.frontmatter.description || '',
	content: post.compiledContent?.() || '',
	tags: post.frontmatter.tags || [],
	date: post.frontmatter.date,
	slug: post.file?.split('/').pop()?.replace('.md', '') || '',
	url: `/blog/${post.file?.split('/').pop()?.replace('.md', '') || ''}/`,
}));

const formatDate = (date: string) => {
	return new Date(date).toLocaleDateString('en-US', {
		year: 'numeric',
		month: 'long',
		day: 'numeric',
	});
};
---

<style is:global>
	.blog-content {
		h2,
		h3,
		p {
			font-family: 'Times New Roman', Times, serif;
			font-weight: normal;
		}
	}

	.blog-post-card {
		border: 2px solid #333333;
		background: transparent;
		transition: all 0.3s ease;
		cursor: pointer;
		box-shadow: 0 0 0 rgba(255, 255, 255, 0);
	}

	.blog-post-card:hover {
		border-color: #ffffff;
		background: #ffffff;
		box-shadow: 0 0 25px rgba(255, 255, 255, 0.4);
	}

	.blog-post-card:hover .blog-post-title {
		color: #000000;
	}

	.blog-post-card:hover .blog-post-description {
		color: #000000;
		opacity: 1;
	}

	.blog-post-card:hover .blog-post-meta {
		color: #000000;
		opacity: 1;
	}

	.blog-post-tag {
		background: rgba(245, 245, 245, 0.1);
		border: 1px solid rgba(245, 245, 245, 0.2);
		transition: all 0.3s ease;
	}

	.blog-post-card:hover .blog-post-tag {
		color: #000000;
		border-color: #cccccc;
		opacity: 1;
	}

	.blog-post-card:hover .blog-post-link {
		color: #000000;
	}

	.tag {
		background: rgba(245, 245, 245, 0.1);
		border: 1px solid rgba(245, 245, 245, 0.2);
		transition: all 0.3s ease;
	}

	.tag:hover {
		background: rgba(245, 245, 245, 0.2);
		border-color: rgba(245, 245, 245, 0.4);
	}

	.tag.active {
		background: #f5f5f5;
		color: #000;
		border-color: #f5f5f5;
	}

	.search-form {
		display: inline-block;
		position: relative;
		min-width: 120px;
		max-width: 100%;
		transition: all 0.3s ease;
	}

	.search-input {
		background: rgba(245, 245, 245, 0.05);
		border: 2px solid rgba(245, 245, 245, 0.1);
		color: #f5f5f5;
		transition: all 0.3s ease;
		width: 100%;
		min-width: 120px;
	}

	.search-input:focus {
		outline: none;
		border-color: white;
		background: rgba(245, 245, 245, 0.08);
	}

	.search-sizer {
		position: absolute;
		top: -9999px;
		left: -9999px;
		visibility: hidden;
		white-space: pre;
		font-family: inherit;
		font-size: 1.125rem;
		font-weight: inherit;
		letter-spacing: inherit;
		padding: 0.75rem 3rem 0.75rem 1rem;
		border: 2px solid transparent;
		line-height: 1.75rem;
	}

	.search-input::placeholder {
		color: rgba(245, 245, 245, 0.6);
	}
</style>

<Layout
	title="Blog | ez dev"
	description="Thoughts, insights, and updates from the ez dev team on software development, open source, and building better technology."
>
	<section
		class="w-[min(80ch,100vw)] min-h-screen mt-[8rem] flex items-start justify-center px-6 md:px-8"
	>
		<div class="w-full mx-auto flex flex-col gap-8 blog-content">
			<Navbar currentPath="/blog" />
			<!-- Search Input -->
			<div>
				<form method="GET" action="/blog" class="search-form relative">
					<span class="search-sizer px-4 py-3 text-lg">Search</span>
					<input
						type="text"
						name="search"
						placeholder="Search"
						class="search-input px-4 py-3 text-lg pr-12"
					/>
					<button
						type="submit"
						class="absolute right-3 top-1/2 transform -translate-y-1/2 text-[#F5F5F5] opacity-60 hover:opacity-100 transition-opacity"
					>
						<svg
							width="20"
							height="20"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
						>
							<circle cx="11" cy="11" r="8"></circle>
							<path d="m21 21-4.35-4.35"></path>
						</svg>
					</button>
				</form>
			</div>

			<!-- Blog Posts -->
			<div id="blog-posts-container" class="space-y-8 mb-24">
				<!-- Posts will be rendered by JavaScript -->
			</div>
		</div>
	</section>

	<Footer slot="footer" />

	<script define:vars={{ allPostsData }}>
		document.addEventListener('DOMContentLoaded', function () {
			const searchForm = document.querySelector('form[action="/blog"]');
			const searchInput = document.querySelector('input[name="search"]');
			const postsContainer = document.getElementById('blog-posts-container');

			// Get URL parameters
			const urlParams = new URLSearchParams(window.location.search);
			let currentSearchQuery = urlParams.get('search') || '';
			let currentSelectedTag = urlParams.get('tag') || '';

			// Set initial search input value from URL
			if (searchInput && currentSearchQuery) {
				searchInput.value = currentSearchQuery;
			}

			// Format date function
			function formatDateClient(dateString) {
				return new Date(dateString).toLocaleDateString('en-US', {
					year: 'numeric',
					month: 'long',
					day: 'numeric',
				});
			}

			// Filter and render posts
			function filterAndRenderPosts() {
				const searchQuery = currentSearchQuery.toLowerCase();
				let filteredPosts = allPostsData;

				// Filter by search query
				if (searchQuery) {
					filteredPosts = filteredPosts.filter((post) => {
						const title = post.title.toLowerCase();
						const description = post.description.toLowerCase();
						const content = post.content.toLowerCase();
						const tags = post.tags.join(' ').toLowerCase();

						return (
							title.includes(searchQuery) ||
							description.includes(searchQuery) ||
							content.includes(searchQuery) ||
							tags.includes(searchQuery)
						);
					});
				}

				// Filter by tag
				if (currentSelectedTag) {
					filteredPosts = filteredPosts.filter((post) =>
						post.tags.includes(currentSelectedTag),
					);
				}

				// Render posts
				if (postsContainer) {
					if (filteredPosts.length === 0) {
						postsContainer.innerHTML = `
							<div class="blog-post-card p-8 text-center">
								<p class="text-lg text-[#F5F5F5] opacity-60">
									${
										currentSearchQuery && currentSelectedTag
											? `No posts found for "${currentSearchQuery}" with tag "${currentSelectedTag}"`
											: currentSearchQuery
												? `No posts found for "${currentSearchQuery}"`
												: currentSelectedTag
													? `No posts found with tag "${currentSelectedTag}"`
													: 'No blog posts yet. Check back soon!'
									}
								</p>
							</div>
						`;
					} else {
						postsContainer.innerHTML = filteredPosts
							.map(
								(post) => `
							<a href="${post.url}" class="block">
								<article class="blog-post-card p-6 md:p-8">
									<div class="flex flex-col gap-4">
										<h3 class="blog-post-title text-3xl md:text-4xl font-bold text-[#F5F5F5] leading-tight">
											${post.title}
										</h3>
										<div class="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
											<time class="blog-post-meta text-[#F5F5F5] opacity-60 text-sm">
												${formatDateClient(post.date)}
											</time>
											${
												post.tags.length > 0
													? `
												<div class="flex flex-wrap gap-2">
													${post.tags
														.map(
															(tag) => `
														<span class="blog-post-tag px-2 py-1 text-xs rounded-full border border-[#333333] text-[#F5F5F5] opacity-70">
															${tag}
														</span>
													`,
														)
														.join('')}
												</div>
											`
													: ''
											}
										</div>
										${
											post.description
												? `
											<p class="blog-post-description text-lg text-[#F5F5F5] opacity-80 leading-relaxed" style="font-family: Times">
												${post.description}
											</p>
										`
												: ''
										}
									</div>
								</article>
							</a>
						`,
							)
							.join('');
					}
				}
			}

			// Initial render
			filterAndRenderPosts();

			if (searchForm && searchInput) {
				const searchSizer = document.querySelector('.search-sizer');

				function updateInputWidth(predictiveText) {
					const text =
						predictiveText || searchInput.value || searchInput.placeholder;
					if (searchSizer) {
						searchSizer.textContent = text;
						// Add generous padding to prevent overflow and ensure comfortable typing space
						const width = Math.max(140, searchSizer.offsetWidth + 40);
						searchForm.style.width = width + 'px';
					}
				}

				// Set initial width
				updateInputWidth();

				// Update search results on input
				searchInput.addEventListener('input', function () {
					currentSearchQuery = searchInput.value;
					filterAndRenderPosts();
					updateInputWidth();

					// Update URL without page reload
					const newUrl = new URL(window.location.href);
					if (currentSearchQuery) {
						newUrl.searchParams.set('search', currentSearchQuery);
					} else {
						newUrl.searchParams.delete('search');
					}
					window.history.replaceState({}, '', newUrl.toString());
				});

				// Predictive width expansion on keydown (before character is added)
				searchInput.addEventListener('keydown', function (e) {
					if (e.key === 'Enter') {
						e.preventDefault();
						// Form submission is handled by input event
						return;
					}

					// Predict the text after this keystroke for width calculation
					if (e.key.length === 1 && !e.ctrlKey && !e.metaKey && !e.altKey) {
						const currentValue = searchInput.value;
						const selectionStart = searchInput.selectionStart || 0;
						const selectionEnd = searchInput.selectionEnd || 0;
						const predictedText =
							currentValue.slice(0, selectionStart) +
							e.key +
							currentValue.slice(selectionEnd);
						updateInputWidth(predictedText);
					} else if (e.key === 'Backspace' || e.key === 'Delete') {
						// Handle deletion
						const currentValue = searchInput.value;
						const selectionStart = searchInput.selectionStart || 0;
						const selectionEnd = searchInput.selectionEnd || 0;
						let predictedText;

						if (selectionStart !== selectionEnd) {
							// Text is selected, will be deleted
							predictedText =
								currentValue.slice(0, selectionStart) +
								currentValue.slice(selectionEnd);
						} else if (e.key === 'Backspace' && selectionStart > 0) {
							// Backspace with cursor
							predictedText =
								currentValue.slice(0, selectionStart - 1) +
								currentValue.slice(selectionStart);
						} else if (
							e.key === 'Delete' &&
							selectionStart < currentValue.length
						) {
							// Delete with cursor
							predictedText =
								currentValue.slice(0, selectionStart) +
								currentValue.slice(selectionStart + 1);
						} else {
							predictedText = currentValue;
						}

						updateInputWidth(predictedText);
					}
				});

				// Handle focus events
				searchInput.addEventListener('focus', function () {
					updateInputWidth();
				});

				searchInput.addEventListener('blur', function () {
					updateInputWidth();
				});

				// Handle window resize
				window.addEventListener('resize', function () {
					updateInputWidth();
				});
			}
		});
	</script>
</Layout>
