---
import Layout from '../layouts/Layout.astro';
import Footer from '../components/Footer.astro';
import Navbar from '../components/Navbar.astro';

import '../styles/markdown.css';

const projects = [
	{
		title: 'markdown-editor',
		description: 'An intuitive, minimal, and feature-rich markdown editor',
		tags: ['TipTap', 'ProseMirror', 'TypeScript'],
		link: 'https://github.com/ezdevlol/mono/tree/main/src/typescript/markdown-editor',
	},
	{
		title: 'codeblock',
		description:
			'A codeblock editor with language server and filesystem support',
		tags: ['CodeMirror', 'TypeScript'],
		link: 'https://github.com/ezdevlol/mono/tree/main/src/typescript/codeblock',
	},
];
---

<Layout
	title="Work | ez dev"
	description="A showcase of projects we've built for clients around the world."
>
	<section
		class="w-[min(80ch,100vw)] min-h-screen mt-[8rem] flex items-start justify-center px-4 md:px-8"
	>
		<div class="w-full mx-auto flex flex-col gap-8">
			<Navbar currentPath="/work" />

			{/* Packery Grid Container */}
			<div id="grid-container" class="opacity-0">
				<div class="grid-sizer"></div>

				{
					projects.map((project) => (
						<div
							class="grid-item"
							data-project-title={project.title}
						>
							<div class="work-item-card h-full border-2 border-[#333333] hover:border-[#ffffff] hover:bg-[#ffffff] transition-all duration-300 overflow-hidden">
								<div class="p-6">
									<div class="flex items-center justify-between mb-3">
										<h3 class="text-2xl font-bold text-[#F5F5F5] work-item-title">
											{project.title}
										</h3>
										<button
											class="expand-toggle text-[#F5F5F5] text-xl transition-transform duration-300"
											aria-label="Toggle project details"
										>
											<span class="toggle-icon">+</span>
										</button>
									</div>
									<p class="description-text text-[18px] text-[#F5F5F5] opacity-80 mb-4 work-item-description">
										{project.description}
									</p>
									<div class="flex flex-wrap gap-2 mb-4">
										{project.tags.map((tech) => (
											<span class="px-2 py-1 text-xs rounded-full border border-[#333333] text-[#F5F5F5] opacity-70 work-item-tag">
												{tech}
											</span>
										))}
									</div>
									<div class="project-content hidden mt-6">
										<div class="project-demo-container min-h-[400px] border border-[#333333]" />
									</div>
								</div>
							</div>
						</div>
					))
				}
			</div>

			<div class="mb-24 px-2">
				<p class="text-lg text-[#F5F5F5] opacity-70 mb-8">
					Want to see yours here?
				</p>
				<a
					href="/newproject"
					class="inline-block bg-[#F5F5F5] text-black px-8 py-4 text-lg transition-all duration-300 hover:bg-opacity-90"
				>
					Start a project
				</a>
			</div>
		</div>
	</section>

	<Footer slot="footer" />

	<script>
		import Packery from 'packery';
		import imagesLoaded from 'imagesloaded';

		let pckry: any | null = null;
		const demos = {
			'markdown-editor': async (containerEl: HTMLElement) => {
				try {
					const { createEditor } = await import(
						'@ezdevlol/markdown-editor'
					);
					createEditor({
						element: containerEl,
						content: `# Welcome to the Markdown Editor!\nThis is an interactive demo.`,
					});

					// After content is loaded, trigger proper relayout
					if (pckry) {
						// Find the parent grid item
						const gridItem = containerEl.closest(
							'.grid-item',
						) as HTMLElement;
						if (
							gridItem &&
							gridItem.classList.contains('is-expanded')
						) {
							// Use fit to properly position the expanded item
							setTimeout(() => pckry?.fit(gridItem), 100);
						}
					}
				} catch (error) {
					console.error('Failed to load markdown editor:', error);
					containerEl.innerHTML = `<div class="text-red-500">Failed to load editor.</div>`;
				}
			},
			codeblock: async (containerEl: HTMLElement) => {
				containerEl.innerHTML =
					'<div class="text-[#F5F5F5] opacity-70">Codeblock demo coming soon...</div>';
			},
		};

		document.addEventListener('DOMContentLoaded', () => {
			const grid = document.querySelector(
				'#grid-container',
			) as HTMLElement;
			if (!grid) return;

			// Handle project card expansion and collapse
			function handleProjectExpansion(item: HTMLElement) {
				const isExpanded = item.classList.contains('is-expanded');
				const contentDiv = item.querySelector(
					'.project-content',
				) as HTMLElement;
				const toggleIcon = item.querySelector(
					'.toggle-icon',
				) as HTMLElement;

				if (!isExpanded) {
					// --- EXPAND ---
					// First show the content
					contentDiv.classList.remove('hidden');

					// Update UI
					toggleIcon.textContent = 'âˆ’';
					toggleIcon.style.transform = 'rotate(180deg)';

					// Add expanded class
					item.classList.add('is-expanded');

					// Load content if needed
					const projectTitle = item.dataset.projectTitle;
					if (!projectTitle || !demos[projectTitle]) return;

					const demoContainer = item.querySelector(
						'.project-demo-container',
					) as HTMLElement;

					// Call the appropriate demo loader once
					const result = demos[projectTitle](demoContainer);
					demos[projectTitle] = () => result;

					// Use fit for expanding - wait a bit for content to render
					if (pckry) {
						setTimeout(() => pckry.fit(item), 50);
					}
				} else {
					// --- COLLAPSE ---
					// Hide content first
					contentDiv.classList.add('hidden');

					// Update UI
					toggleIcon.textContent = '+';
					toggleIcon.style.transform = 'rotate(0deg)';

					// Remove expanded class after a brief delay to allow content to hide
					setTimeout(() => {
						item.classList.remove('is-expanded');

						// Use layout instead of shiftLayout for better repositioning
						if (pckry) {
							pckry.layout();
						}
					}, 100);
				}
			}

			// Initialize Packery
			const initPackery = () => {
				pckry = new Packery(grid, {
					itemSelector: '.grid-item',
					sizer: '.grid-sizer',
					gutter: 16,
					percentPosition: true,
				});

				// Use event delegation for expand/collapse clicks
				grid.addEventListener('click', (event) => {
					const target = event.target as HTMLElement;
					const button = target.closest('.expand-toggle');
					if (button) {
						const item = target.closest(
							'.grid-item',
						) as HTMLElement;
						if (item) {
							handleProjectExpansion(item);
						}
					}
				});

				// Fade in the grid
				grid.style.opacity = '1';
			};

			// Wait for images to load before initializing to prevent overlap
			imagesLoaded(grid, initPackery);
		});
	</script>

	<style>
		/* Set the font for the description text */
		.description-text {
			font-family: Times, serif;
		}

		/* Base styles for the grid container and items */
		#grid-container {
			transition: opacity 0.4s ease-in-out;
		}
		.grid-item {
			box-sizing: border-box;
			width: 100%; /* Full width on mobile */
		}
		.grid-sizer {
			width: 100%;
		}

		/* 2-column layout for medium screens and up */
		@media (min-width: 768px) {
			.grid-item {
				width: calc(50% - 8px);
			}
			.grid-sizer {
				width: calc(50% - 8px);
			}
		}

		/* Style for expanded items */
		.grid-item.is-expanded {
			width: 100% !important; /* Force full width on all screen sizes */
			z-index: 10;
		}

		/* Ensure collapsed items reset to proper width */
		.grid-item:not(.is-expanded) {
			width: 100%; /* Full width on mobile */
		}

		@media (min-width: 768px) {
			.grid-item:not(.is-expanded) {
				width: calc(50% - 8px) !important;
			}
		}

		.project-demo-container {
			display: flex;
		}

		/* Ensure project content transitions smoothly */
		.project-content {
			transition: all 0.3s ease;
			overflow: hidden;
		}

		.project-content.hidden {
			max-height: 0;
			opacity: 0;
			margin-top: 0;
			padding-top: 0;
			border-top: none;
		}

		.project-content:not(.hidden) {
			max-height: none;
			opacity: 1;
		}

		/* Hover effects for work items */
		.work-item-card {
			box-shadow: 0 0 0 rgba(255, 255, 255, 0);
		}
		.work-item-card:hover {
			box-shadow: 0 0 25px rgba(255, 255, 255, 0.4);
		}
		.work-item-card:hover * {
			color: #000000;
			opacity: 1;
		}
		.work-item-card:hover .work-item-tag {
			color: #000000;
			background-color: #f0f0f0;
			border-color: #cccccc;
			opacity: 1;
		}
	</style>
</Layout>
