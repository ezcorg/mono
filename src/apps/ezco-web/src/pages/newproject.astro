---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
---

<Layout
	title="Start a Project | ez co"
	description="Ready to start your next project? Let us know how we can help."
>
	<section
		class="w-[min(80ch,100vw)] min-h-screen mt-[8rem] flex items-start justify-center px-6 pb-12 md:px-8 md:pb-16 mb-24"
	>
		<div class="w-full mx-auto flex flex-col gap-8">
			<Navbar currentPath="/newproject" />
			<form class="space-y-6 max-w-2xl" id="contact-form">
				<div>
					<label for="name" class="block text-[#F5F5F5] mb-2"
						>Name *</label
					>
					<input
						type="text"
						id="name"
						name="name"
						required
						class="w-full bg-transparent border-2 border-[#333333] text-[#F5F5F5] px-4 py-3 focus:border-[#F5F5F5] focus:outline-none transition-colors duration-300"
					/>
				</div>
				<div>
					<label for="email" class="block text-[#F5F5F5] mb-2"
						>Email *</label
					>
					<input
						type="email"
						id="email"
						name="email"
						required
						class="w-full bg-transparent border-2 border-[#333333] text-[#F5F5F5] px-4 py-3 focus:border-[#F5F5F5] focus:outline-none transition-colors duration-300"
					/>
				</div>

				<div>
					<label for="service" class="block text-[#F5F5F5] mb-2"
						>Service *</label
					>
					<select
						id="service"
						name="service"
						required
						class="w-full bg-transparent border-2 border-[#333333] text-[#F5F5F5] px-4 py-3 focus:border-[#F5F5F5] focus:outline-none transition-colors duration-300 appearance-none"
					>
						<option
							value=""
							disabled
							selected
							class="bg-black text-[#F5F5F5]"
							>What can we help you with?</option
						>
						<option
							value="open-source"
							class="bg-black text-[#F5F5F5]">Open source</option
						>
						<option
							value="software-development"
							class="bg-black text-[#F5F5F5]"
							>Software development</option
						>
						<option
							value="consulting"
							class="bg-black text-[#F5F5F5]">Consulting</option
						>
						<option value="other" class="bg-black text-[#F5F5F5]"
							>Other</option
						>
					</select>
				</div>

				<div>
					<label for="date-range" class="block text-[#F5F5F5] mb-2"
						>Timeline</label
					>
					<input
						type="text"
						id="date-range"
						name="dateRange"
						placeholder="Select date range"
						class="w-full bg-transparent border-2 border-[#333333] text-[#F5F5F5] placeholder-gray-400 px-4 py-3 focus:border-[#F5F5F5] focus:outline-none transition-colors duration-300"
					/>
				</div>

				<div>
					<label
						for="minBudget"
						class="flex items-center gap-[1rem] text-[#F5F5F5] mb-2"
						>Budget *
					</label>
					<div
						class="relative mt-4 h-[7rem] transition-opacity duration-300"
						id="budgetSectionContainer"
					>
						<div
							class="flex flex-wrap justify-between items-start gap-4 mb-8 relative"
							id="budgetInputsContainer"
						>
							<div
								class="flex flex-col items-center z-20"
								id="minBudgetWrapper"
								style="position: static;"
							>
								<div class="relative">
									<span
										class="absolute left-3 top-1/2 -translate-y-1/2 text-white pointer-events-none"
										id="minCurrencySymbol">$</span
									>
									<input
										type="number"
										id="minBudget"
										name="minBudget"
										min="1000"
										max="10000"
										required
										value="1000"
										class="pl-[calc(1.5em+0.5rem)] bg-transparent border-2 border-[#333333] text-[#F5F5F5] py-2 focus:border-[#F5F5F5] focus:outline-none transition-colors duration-300 text-center px-2"
									/>
								</div>
								<small class="text-[#AAAAAA] text-center w-full"
									>Min</small
								>
							</div>

							<div
								class="flex flex-col items-center z-20"
								id="maxBudgetWrapper"
								style="position: static;"
							>
								<div class="relative">
									<span
										class="absolute left-3 top-1/2 -translate-y-1/2 text-white pointer-events-none"
										id="maxCurrencySymbol">$</span
									>
									<input
										type="number"
										id="maxBudget"
										name="maxBudget"
										min="1000"
										required
										value="10000"
										class="pl-[calc(1.5em+0.5rem)] bg-transparent border-2 border-[#333333] text-[#F5F5F5] py-2 focus:border-[#F5F5F5] focus:outline-none transition-colors duration-300 text-center px-2"
									/>
								</div>
								<small class="text-[#AAAAAA] text-center w-full"
									>Max</small
								>
							</div>

							<select
								id="currencySelect"
								name="currency"
								class="bg-transparent border-2 border-[#333333] text-[#F5F5F5] px-3 py-2 focus:border-[#F5F5F5] focus:outline-none appearance-none leading-none z-30"
								aria-label="Currency select"
								style="position: static; margin-left: auto;"
							>
								<option value="USD" selected>ðŸ‡ºðŸ‡¸ USD</option>
							</select>
						</div>
						<range-slider
							id="budgetSlider"
							class="w-full h-6 absolute bottom-0"
							min="1000"
							max="1000000"
							step="0.01"
							value="3,6"
						>
							<div data-track></div>
							<div data-track-fill></div>
							<div data-runnable-track>
								<div data-thumb aria-label="Minimum Price">
								</div>
								<div data-thumb aria-label="Maximum Price">
								</div>
							</div>
						</range-slider>
					</div>
				</div>

				<div>
					<label for="message" class="block text-[#F5F5F5] mb-2"
						>Message *</label
					>
					<textarea
						id="message"
						name="message"
						required
						rows="6"
						minlength="50"
						oninput="checkMessageLength(this)"
						class="w-full bg-transparent border-2 border-[#333333] text-[#F5F5F5] px-4 py-3 focus:border-[#F5F5F5] focus:outline-none transition-colors duration-300 resize-vertical"
					></textarea>
					<small id="message-warning" class="text-red-500 hidden"
						>Minimum 50 characters required.</small
					>
				</div>

				<!-- Cloudflare Turnstile -->
				<div
					class="cf-turnstile"
					data-sitekey=`${import.meta.env.DEV ? '1x00000000000000000000AA' : '0x4AAAAAABjl6CJ20hxOvkB9'}`
					data-theme="dark"
				>
				</div>

				<button
					type="submit"
					class="bg-[#F5F5F5] text-black px-8 py-4 text-lg transition-all duration-300 hover:bg-opacity-90"
				>
					Send message
				</button>
			</form>
		</div>
	</section>

	<Footer slot="footer" />
</Layout>

<script src="https://cdn.jsdelivr.net/npm/range-slider-element@2/+esm"></script>
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer
></script>
<link
	rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/range-slider-element@2/dist/range-slider-element.css"
/>
<link
	rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
/>

<style>
	range-slider [data-track] {
		background-color: var(--range-slider-track-bg);
	}

	range-slider [data-track-fill] {
		background-color: var(--range-slider-track-fill-bg);
	}

	range-slider [data-thumb] {
		border-radius: 0px;
		background-color: var(--range-slider-track-fill-bg);
	}

	/* Custom styles for the range slider */
	range-slider {
		--range-slider-track-bg: #555555; /* Gray background for the track */
		--range-slider-track-fill-bg: white;
		--range-slider-thumb-size: 20px; /* Size of the thumb */
		--range-slider-thumb-bg: #f5f5f5; /* White color for the thumb */
		--range-slider-thumb-border: none; /* No border for the thumb */
		--range-slider-thumb-radius: 0; /* Square shape */
		--range-slider-thumb-shadow: none; /* No shadow */
	}

	/* Adjust specific input styling to prevent shrinking too much */
	#minBudget,
	#maxBudget {
		width: 14ch; /* Fixed width for consistency */
		text-align: center;
	}

	#currencySelect {
		min-width: 6ch; /* Ensure currency select has enough space */
		height: 44px;
		position: static; /* Ensure it stays within flow */
	}

	#minBudgetWrapper,
	#maxBudgetWrapper {
		/* JavaScript will set position: absolute and positioning later */
	}

	/* Ensure currency select starts in normal flow */
	#currencySelect {
		/* JavaScript will set position: absolute later if needed */
	}
</style>

<style is:global>
	:root {
		--flatpickr-day-bg: #dfdfdf;
		--flatpickr-day-bg-end: #f5f5f5;
	}

	/* Custom flatpickr styles to match app theme - using higher specificity */
	.flatpickr-calendar {
		background: #000000 !important;
		background-color: #000000 !important;
		border: 2px solid #333333 !important;
		box-shadow: none !important;
	}

	.flatpickr-calendar.flatpickr-calendar.open {
		border-color: #f5f5f5 !important;
	}

	.flatpickr-calendar .flatpickr-months {
		background: #000000 !important;
		background-color: #000000 !important;
		border-bottom: 1px solid #333333 !important;
	}

	.flatpickr-calendar .flatpickr-month {
		background: transparent !important;
		background-color: transparent !important;
		color: #f5f5f5 !important;
	}

	.flatpickr-calendar
		.flatpickr-current-month
		.flatpickr-monthDropdown-months {
		background: #000000 !important;
		background-color: #000000 !important;
		color: #f5f5f5 !important;
		border: 1px solid #333333 !important;
	}

	.flatpickr-calendar
		.flatpickr-current-month
		.flatpickr-monthDropdown-months:hover {
		background: #333333 !important;
		background-color: #333333 !important;
	}

	.flatpickr-calendar .flatpickr-current-month input.cur-year {
		background: transparent !important;
		background-color: transparent !important;
		color: #f5f5f5 !important;
		border: none !important;
	}

	.flatpickr-calendar .flatpickr-weekdays {
		background: #000000 !important;
		background-color: #000000 !important;
		color: #aaaaaa !important;
	}

	.flatpickr-calendar .flatpickr-weekday {
		background: transparent !important;
		background-color: transparent !important;
		color: #aaaaaa !important;
	}

	.flatpickr-calendar .flatpickr-days {
		background: #000000 !important;
		background-color: #000000 !important;
	}

	.flatpickr-calendar .flatpickr-day {
		background: transparent !important;
		background-color: transparent !important;
		color: #f5f5f5 !important;
		border: none !important;
	}

	.flatpickr-calendar .flatpickr-day:hover {
		background: #333333 !important;
		background-color: #333333 !important;
		color: #f5f5f5 !important;
	}

	.flatpickr-calendar .flatpickr-day.selected {
		background: #f5f5f5 !important;
		background-color: #f5f5f5 !important;
		color: #000000 !important;
	}

	.flatpickr-calendar .flatpickr-day.selected:hover {
		background: #f5f5f5 !important;
		background-color: #f5f5f5 !important;
		color: #000000 !important;
	}

	.flatpickr-calendar .flatpickr-day.inRange {
		background: var(--flatpickr-day-bg) !important;
		background-color: var(--flatpickr-day-bg) !important;
		color: #000000 !important;
		box-shadow:
			-5px 0 0 var(--flatpickr-day-bg),
			5px 0 0 var(--flatpickr-day-bg);
	}

	.flatpickr-calendar .flatpickr-day.endRange {
		box-shadow: -5px 0 0 var(--flatpickr-day-bg) !important;
	}

	.flatpickr-calendar .flatpickr-day.startRange,
	.flatpickr-calendar .flatpickr-day.endRange {
		background: var(--flatpickr-day-bg-end) !important;
		background-color: var(--flatpickr-day-bg-end) !important;
		color: #000000 !important;
	}

	.flatpickr-calendar .flatpickr-day.today {
		border: 1px solid #f5f5f5 !important;
		background: transparent !important;
		background-color: transparent !important;
		color: #f5f5f5 !important;
	}

	.flatpickr-calendar .flatpickr-day.today:hover {
		background: #333333 !important;
		background-color: #333333 !important;
		color: #f5f5f5 !important;
		border-color: #f5f5f5 !important;
	}

	.flatpickr-calendar .flatpickr-day.prevMonthDay,
	.flatpickr-calendar .flatpickr-day.nextMonthDay {
		color: #555555 !important;
	}

	.flatpickr-calendar .flatpickr-day.prevMonthDay:hover,
	.flatpickr-calendar .flatpickr-day.nextMonthDay:hover {
		background: #333333 !important;
		background-color: #333333 !important;
		color: #aaaaaa !important;
	}

	.flatpickr-calendar .flatpickr-prev-month,
	.flatpickr-calendar .flatpickr-next-month {
		color: #f5f5f5 !important;
		fill: #f5f5f5 !important;
	}

	.flatpickr-calendar .flatpickr-prev-month:hover,
	.flatpickr-calendar .flatpickr-next-month:hover {
		color: #aaaaaa !important;
		fill: #aaaaaa !important;
	}
</style>

<script>
	import flatpickr from 'flatpickr';
	import {
		validateContactForm,
		getValidationErrorMessage,
		EXCHANGE_RATES,
		getCurrencySymbol,
		getCurrencyFlag,
		convertCurrency,
		MIN_USD_VALUE,
		MAX_USD_VALUE,
	} from '@joinezco/shared';
	import { ValidationError } from '@joinezco/shared';

	document.addEventListener('DOMContentLoaded', () => {
		const minInput = document.getElementById(
			'minBudget',
		) as HTMLInputElement;
		const maxInput = document.getElementById(
			'maxBudget',
		) as HTMLInputElement;
		const currencySelect = document.getElementById(
			'currencySelect',
		) as HTMLSelectElement;
		const minSymbol = document.getElementById(
			'minCurrencySymbol',
		) as HTMLSpanElement;
		const maxSymbol = document.getElementById(
			'maxCurrencySymbol',
		) as HTMLSpanElement;
		const slider = document.getElementById('budgetSlider') as any; // range-slider custom element
		const budgetSectionContainer = document.getElementById(
			'budgetSectionContainer',
		) as HTMLDivElement;
		const minBudgetWrapper = document.getElementById(
			'minBudgetWrapper',
		) as HTMLDivElement;
		const maxBudgetWrapper = document.getElementById(
			'maxBudgetWrapper',
		) as HTMLDivElement;
		const budgetInputsContainer = document.getElementById(
			'budgetInputsContainer',
		) as HTMLDivElement;
		const serviceSelect = document.getElementById(
			'service',
		) as HTMLSelectElement;

		// Service selector URL synchronization
		function getUrlParams() {
			return new URLSearchParams(window.location.search);
		}

		function updateUrlParam(key, value) {
			const url = new URL(window.location.href);
			if (value) {
				url.searchParams.set(key, value);
			} else {
				url.searchParams.delete(key);
			}
			window.history.replaceState({}, '', url.toString());
		}

		// Initialize service selector from URL parameter
		const urlParams = getUrlParams();
		const serviceParam = urlParams.get('service');
		if (serviceParam && serviceSelect) {
			serviceSelect.value = serviceParam;
		}

		// Listen for service selector changes
		if (serviceSelect) {
			serviceSelect.addEventListener('change', () => {
				updateUrlParam('service', serviceSelect.value);
			});
		}

		let currentCurrency = 'USD' as keyof typeof EXCHANGE_RATES;

		function updateCurrencySymbols(code) {
			const symbol = getCurrencySymbol(code as any);
			minSymbol.textContent = symbol;
			maxSymbol.textContent = symbol;
		}

		function debounce(func, delay) {
			let timeout;
			return function (...args) {
				const context = this;
				clearTimeout(timeout);
				timeout = setTimeout(() => func.apply(context, args), delay);
			};
		}

		// Populate currency select with static exchange rates
		function populateCurrencySelect() {
			currencySelect.innerHTML = '';
			Object.keys(EXCHANGE_RATES)
				.sort()
				.forEach((code) => {
					const option = document.createElement('option');
					option.value = code;
					option.textContent = `${getCurrencyFlag(code as any)} ${code}`;
					currencySelect.appendChild(option);
				});
			currencySelect.value = currentCurrency;
			updateCurrencySymbols(currentCurrency);
		}

		populateCurrencySelect();

		// Use shared library convertCurrency function with type assertions
		function convertCurrencyLocal(amount, from, to) {
			return convertCurrency(amount, from as any, to as any);
		}

		currencySelect.addEventListener('change', () => {
			const newCurrency = currencySelect.value;
			const minVal = parseFloat(minInput.value);
			const maxVal = parseFloat(maxInput.value);

			// Convert current values to USD first
			const minValInUSD = convertCurrencyLocal(
				minVal,
				currentCurrency,
				'USD',
			);
			const maxValInUSD = convertCurrencyLocal(
				maxVal,
				currentCurrency,
				'USD',
			);

			// Update current currency
			currentCurrency = newCurrency as keyof typeof EXCHANGE_RATES;

			// Convert from USD to new currency
			const newMin = convertCurrencyLocal(
				minValInUSD,
				'USD',
				newCurrency,
			);
			const newMax = convertCurrencyLocal(
				maxValInUSD,
				'USD',
				newCurrency,
			);

			minInput.value = Math.round(newMin).toString();
			maxInput.value = Math.round(newMax).toString();

			updateCurrencySymbols(newCurrency);

			// Update slider bounds for new currency
			const sliderMinConverted = convertCurrencyLocal(
				MIN_USD_VALUE,
				'USD',
				newCurrency,
			);
			const sliderMaxConverted = convertCurrencyLocal(
				MAX_USD_VALUE,
				'USD',
				newCurrency,
			);

			slider.setAttribute(
				'min',
				Math.log10(sliderMinConverted).toFixed(2),
			);
			slider.setAttribute(
				'max',
				Math.log10(sliderMaxConverted).toFixed(2),
			);

			updateSliderFromInputs();
			alignInputsAndAdjustHeight();
		});

		function updateSliderFromInputs() {
			let minVal = parseFloat(minInput.value);
			let maxVal = parseFloat(maxInput.value);

			// Convert to USD for validation
			const minValInUSD = convertCurrencyLocal(
				minVal,
				currentCurrency,
				'USD',
			);
			const maxValInUSD = convertCurrencyLocal(
				maxVal,
				currentCurrency,
				'USD',
			);

			// Apply USD constraints and convert back
			minVal = convertCurrencyLocal(
				Math.max(MIN_USD_VALUE, minValInUSD),
				'USD',
				currentCurrency,
			);
			maxVal = convertCurrencyLocal(
				Math.min(MAX_USD_VALUE, Math.max(minValInUSD, maxValInUSD)),
				'USD',
				currentCurrency,
			);

			minInput.value = Math.round(minVal).toString();
			maxInput.value = Math.round(maxVal).toString();

			const minLog = Math.log10(minVal).toFixed(2);
			const maxLog = Math.log10(maxVal).toFixed(2);

			slider.value = `${minLog},${maxLog}`;
		}

		function updateInputsFromSlider() {
			const [low, high] = slider.value.split(',').map(parseFloat);
			minInput.value = Math.round(Math.pow(10, low)).toString();
			maxInput.value = Math.round(Math.pow(10, high)).toString();

			minInput.setAttribute('max', maxInput.value);
			maxInput.setAttribute('min', minInput.value);
		}

		const alignInputsAndAdjustHeight = () => {
			requestAnimationFrame(() => {
				const thumbs = slider.querySelectorAll('[data-thumb]');
				if (!thumbs || thumbs.length < 2) return;

				const minThumb = thumbs[0];
				const maxThumb = thumbs[1];

				const sliderRect = slider.getBoundingClientRect();
				const minThumbRect = minThumb.getBoundingClientRect();
				const maxThumbRect = maxThumb.getBoundingClientRect();

				const minInputRect = minInput.getBoundingClientRect();
				const maxInputRect = maxInput.getBoundingClientRect();
				const currencySelectRect =
					currencySelect.getBoundingClientRect();

				const containerRect =
					budgetInputsContainer.getBoundingClientRect();

				let minLeft =
					minThumbRect.left +
					minThumbRect.width / 2 -
					minInputRect.width / 2 -
					containerRect.left;
				let maxLeft =
					maxThumbRect.left +
					maxThumbRect.width / 2 -
					maxInputRect.width / 2 -
					containerRect.left;

				// Clamp input positions to slider bounds
				const sliderWidth = sliderRect.width;
				minLeft = Math.max(
					0,
					Math.min(minLeft, sliderWidth - minInputRect.width),
				);
				maxLeft = Math.max(
					0,
					Math.min(maxLeft, sliderWidth - maxInputRect.width),
				);

				// Set absolute positioning and initialize positions
				minBudgetWrapper.style.position = 'absolute';
				maxBudgetWrapper.style.position = 'absolute';
				minBudgetWrapper.style.left = `${minLeft}px`;
				maxBudgetWrapper.style.left = `${maxLeft}px`;
				minBudgetWrapper.style.top = `0px`;
				maxBudgetWrapper.style.top = `0px`;
				currencySelect.style.position = 'static'; // Ensure it's in flow for initial measurement

				const inputVerticalSpacing = 10; // Space between stacked inputs
				const subtitleHeight =
					minBudgetWrapper.querySelector('small')?.offsetHeight || 0; // Height of "Min" / "Max" subtitle
				const minComponentHeight = minInputRect.height + subtitleHeight;
				const maxComponentHeight = maxInputRect.height + subtitleHeight;

				// Initialize input positions
				let minTop = 0;
				let maxTop = 0;

				const overlapThreshold = -4; // Pixels to consider for overlap

				// Currency selector positioning - prioritize top position
				const currencySelectTop = 0; // Always keep currency selector at the top
				const currencySelectHeight = currencySelectRect.height;

				// Apply currency select position first (at the top)
				currencySelect.style.position = 'absolute';
				currencySelect.style.right = '0';
				currencySelect.style.top = `${currencySelectTop}px`;

				// Check if currency select overlaps with minBudgetWrapper or maxBudgetWrapper
				const currencySelectLeft =
					currencySelectRect.left - containerRect.left;
				const currencySelectRight =
					currencySelectLeft + currencySelectRect.width;
				const minWrapperRight = minLeft + minInputRect.width;
				const maxWrapperRight = maxLeft + maxInputRect.width;

				const currencyOverlapWithMin =
					currencySelectRight > minLeft + overlapThreshold &&
					currencySelectLeft < minWrapperRight - overlapThreshold;

				const currencyOverlapWithMax =
					currencySelectRight > maxLeft + overlapThreshold &&
					currencySelectLeft < maxWrapperRight - overlapThreshold;

				// If currency selector overlaps with inputs, move the inputs down first
				if (currencyOverlapWithMin || currencyOverlapWithMax) {
					const currencyPushDownOffset =
						currencySelectHeight + inputVerticalSpacing;

					if (currencyOverlapWithMin) {
						minTop += currencyPushDownOffset;
					}
					if (currencyOverlapWithMax) {
						maxTop += currencyPushDownOffset;
					}
				}

				// Now handle min/max input overlaps (after currency selector adjustments)
				const minInputRightEdge = minLeft + minInputRect.width;
				const maxInputRightEdge = maxLeft + maxInputRect.width;

				const inputsOverlapHorizontal =
					minInputRightEdge > maxLeft + overlapThreshold &&
					maxInputRightEdge > minLeft + overlapThreshold;

				if (inputsOverlapHorizontal) {
					// If they overlap, stack them vertically
					if (minLeft < maxLeft) {
						// Min is generally to the left, max goes below
						maxTop = Math.max(
							maxTop,
							minTop + minComponentHeight + inputVerticalSpacing,
						);
					} else {
						// Max is generally to the left, min goes below
						minTop = Math.max(
							minTop,
							maxTop + maxComponentHeight + inputVerticalSpacing,
						);
					}
				}

				// Apply final input positions
				minBudgetWrapper.style.top = `${minTop}px`;
				maxBudgetWrapper.style.top = `${maxTop}px`;

				// Calculate final max bottom for inputs
				const finalMinWrapperBottom = minTop + minComponentHeight;
				const finalMaxWrapperBottom = maxTop + maxComponentHeight;
				const finalMaxInputsBottom = Math.max(
					finalMinWrapperBottom,
					finalMaxWrapperBottom,
				);

				// Adjust the height of budgetInputsContainer
				const currencySelectBottom =
					currencySelectTop + currencySelectHeight;
				const calculatedInputsContainerHeight = Math.max(
					finalMaxInputsBottom,
					currencySelectBottom,
				);

				budgetInputsContainer.style.height = `${calculatedInputsContainerHeight}px`;

				const sliderHeight = 24; // h-6 = 24px
				const bottomPadding = 16; // from mb-8 on budgetInputsContainer
				const buffer = 10; // Extra buffer

				budgetSectionContainer.style.height = `${
					calculatedInputsContainerHeight +
					sliderHeight +
					bottomPadding +
					buffer
				}px`;
			});
		};

		const debouncedAlignInputsAndAdjustHeight = debounce(
			alignInputsAndAdjustHeight,
			1,
		);

		// Use a single, comprehensive ResizeObserver
		const resizeObserver = new ResizeObserver((entries) => {
			// Trigger on any relevant element's resize
			debouncedAlignInputsAndAdjustHeight();
		});

		const initialSliderMinConverted = convertCurrency(
			MIN_USD_VALUE,
			'USD',
			currentCurrency,
		);
		const initialSliderMaxConverted = convertCurrency(
			MAX_USD_VALUE,
			'USD',
			currentCurrency,
		);
		slider.setAttribute(
			'min',
			Math.log10(initialSliderMinConverted).toFixed(2),
		);
		slider.setAttribute(
			'max',
			Math.log10(initialSliderMaxConverted).toFixed(2),
		);

		minInput.value = Math.round(
			convertCurrency(MIN_USD_VALUE, 'USD', currentCurrency),
		).toString();
		maxInput.value = Math.round(
			convertCurrency(10000, 'USD', currentCurrency),
		).toString();

		updateSliderFromInputs();

		// Initial render to ensure elements are positioned correctly before user interaction
		requestAnimationFrame(() => {
			alignInputsAndAdjustHeight();
		});

		// Observe all relevant elements for layout changes
		if (budgetInputsContainer)
			resizeObserver.observe(budgetInputsContainer);
		if (slider) resizeObserver.observe(slider);
		if (minInput) resizeObserver.observe(minInput);
		if (maxInput) resizeObserver.observe(maxInput);
		if (currencySelect) resizeObserver.observe(currencySelect);
		if (minBudgetWrapper) resizeObserver.observe(minBudgetWrapper); // Observe wrappers to detect subtitle height changes
		if (maxBudgetWrapper) resizeObserver.observe(maxBudgetWrapper);

		// Validation function for inputs
		function validateAndUpdateInput(
			input: HTMLInputElement,
			isMin: boolean,
		) {
			let inputVal = parseFloat(input.value) || 0;
			let otherVal = parseFloat((isMin ? maxInput : minInput).value) || 0;

			// Apply constraints
			if (isMin) {
				// Ensure min doesn't exceed max
				if (inputVal > otherVal && otherVal > 0) {
					inputVal = otherVal;
				}
			} else {
				// Ensure max doesn't go below min
				if (inputVal < otherVal && otherVal > 0) {
					inputVal = otherVal;
				}
			}

			const inputValInUSD = convertCurrency(
				inputVal,
				currentCurrency,
				'USD',
			);
			const otherValInUSD = convertCurrency(
				otherVal,
				currentCurrency,
				'USD',
			);

			let newInputValInUSD = isMin
				? Math.max(MIN_USD_VALUE, inputValInUSD)
				: Math.min(MAX_USD_VALUE, inputValInUSD);

			if (
				isMin &&
				newInputValInUSD > otherValInUSD &&
				otherValInUSD > 0
			) {
				newInputValInUSD = otherValInUSD;
			} else if (
				!isMin &&
				newInputValInUSD < otherValInUSD &&
				otherValInUSD > 0
			) {
				newInputValInUSD = otherValInUSD;
			}

			const finalVal = Math.round(
				convertCurrency(newInputValInUSD, 'USD', currentCurrency),
			);

			if (input.value !== finalVal.toString()) {
				input.value = finalVal.toString();
			}

			minInput.setAttribute('max', maxInput.value);
			maxInput.setAttribute('min', minInput.value);

			updateSliderFromInputs();
			debouncedAlignInputsAndAdjustHeight();
		}

		// Event listeners for synchronization
		slider.addEventListener('input', () => {
			updateInputsFromSlider(); // Update inputs immediately on drag
			debouncedAlignInputsAndAdjustHeight();
		});

		// Validate only on Enter key and blur (focus loss)
		minInput.addEventListener('keydown', (e) => {
			if (e.key === 'Enter') {
				e.preventDefault(); // Prevent form submission
				validateAndUpdateInput(minInput, true);
				minInput.blur(); // Remove focus to show the updated value
			}
		});

		minInput.addEventListener('blur', () => {
			validateAndUpdateInput(minInput, true);
		});

		maxInput.addEventListener('keydown', (e) => {
			if (e.key === 'Enter') {
				e.preventDefault(); // Prevent form submission
				validateAndUpdateInput(maxInput, false);
				maxInput.blur(); // Remove focus to show the updated value
			}
		});

		maxInput.addEventListener('blur', () => {
			validateAndUpdateInput(maxInput, false);
		});

		// Set initial min/max attributes for HTML5 validation
		minInput.setAttribute('max', maxInput.value);
		maxInput.setAttribute('min', minInput.value);

		const fp = flatpickr('#date-range', {
			mode: 'range',
			dateFormat: 'Y-m-d',
			altInput: true,
			altFormat: 'F j, Y',
		}) as flatpickr.Instance;

		(window as any).checkMessageLength = function (
			textarea: HTMLTextAreaElement,
		) {
			const warning = document.getElementById('message-warning');
			if (warning) {
				if (textarea.value.length < 50) {
					warning.classList.remove('hidden');
				} else {
					warning.classList.add('hidden');
				}
			}
		};

		// Handle form submission
		const contactForm = document.getElementById(
			'contact-form',
		) as HTMLFormElement;
		const submitButton = contactForm.querySelector(
			'button[type="submit"]',
		) as HTMLButtonElement;
		const originalButtonText = submitButton.textContent;

		contactForm.addEventListener('submit', async (e) => {
			e.preventDefault();
			// Disable submit button and show loading state
			submitButton.disabled = true;
			submitButton.textContent = 'Sending...';
			submitButton.classList.add('opacity-50');

			try {
				const formData = new FormData(contactForm);

				// Get Turnstile token
				const turnstileResponse = formData.get(
					'cf-turnstile-response',
				) as string;
				if (!turnstileResponse) {
					throw new Error('Please complete the captcha verification');
				}

				// Extract form fields manually into an object
				const formDataObject = {
					name: formData.get('name') as string,
					email: formData.get('email') as string,
					service: formData.get('service') as string,
					dateRange: fp.selectedDates.slice(0, 2),
					minBudget: Number(formData.get('minBudget')),
					maxBudget: Number(formData.get('maxBudget')),
					currency: formData.get('currency') as string,
					message: formData.get('message') as string,
					turnstileToken: turnstileResponse,
				};

				// Validate using shared validation library
				const validation = validateContactForm(formDataObject);

				if (!validation.success) {
					throw new Error(
						getValidationErrorMessage(
							validation as ValidationError,
						),
					);
				}

				const response = await fetch(
					import.meta.env.DEV
						? 'http://localhost:8787'
						: 'https://newproject.joinez.co',
					{
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify(validation.data),
					},
				);

				const result = await response.json();

				if (response.ok && result.success) {
					// Show success message
					contactForm.innerHTML = `
						<div class="text-center py-8">
							<div class="text-[#F5F5F5] text-xl mb-4">âœ“ Message sent successfully!</div>
							<p class="text-[#AAAAAA]">Thank you for your inquiry. We'll get back to you soon.</p>
						</div>
					`;
				} else {
					throw new Error(result.error || 'Failed to send message');
				}
			} catch (error) {
				console.error('Form submission error:', error);

				// Re-enable submit button
				submitButton.disabled = false;
				submitButton.textContent = originalButtonText;
				submitButton.classList.remove('opacity-50');
			}
		});
	});
</script>
